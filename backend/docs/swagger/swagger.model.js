"use strict";

const j2s = require("joi-to-swagger");
const user = require("../../user/user.schema");
const userResponseExample = require("../response/user.json");
/**
 *
 * Schemas
 *
 */
const schema = {
	user: j2s(user).swagger
};

const HOST = "wade-realworld-app-demo.com";

function get() {
	const json = {
		swagger: "2.0",
		info: {
			title: "Real World Application API Document",
			version: "1.0.0",
			description: "Example Project (Express + MySql) codebase containing real world examples (CRUD, auth etc) that adheres to the RealWorld API spec.",
			contact: {
				name: "Wade Li",
				url: "https://github.com/wadelicw/realworld-fullstack",
				email: "wadelicw@gmail.com"
			},
			license: {
				name: "MIT",
				url: "https://opensource.org/licenses/MIT"
			}
			// "x-logo": {
			// 	"url": "",
			// 	"altText": "Logo"
			//   }
		},

		/**
		 *
		 * Base URL
		 * The base URL for all API calls is defined using schemes, host and basePath:
		 *
		 */
		host: HOST,
		basePath: "/api",
		schemes: [
			"http"
			// "https"
		],
		consumes: ["application/json"],
		produces: ["application/json"],
		securityDefinitions: {
			Token: {
				type: "apiKey",
				name: "Authorization",
				description: "For accessing the protected API resources, you must have received a a valid JWT token after logging in. This JWT token must then be used for all protected resources by passing it in via the 'Authorization' header.\n\nA JWT token is generated by the API by logging in via /login.",
				in: "header",
				scheme: "bearer",
				bearerFormat: "JWT"
			}
		},
		paths: {
			"/users/login": {
				/**
				 *
				 * Authentication
				 *
				 */
				post: {
					summary: "Existing User Login",
					description: "Login for existing user",
					tags: [
						"User"
					],
					produces: [
						"application/json"
					],
					operationId: "UserLogin",
					parameters: [
						{
							name: "body",
							in: "body",
							required: true,
							description: "Credentials to use",
							schema: {
								$ref: "#/definitions/UserLoginRequest"
							}
						}
					],
					responses: {
						200: {
							description: "Success",
							schema: schema.user.properties.doc,
							examples: {
								"application/json": userResponseExample
							}
						},
						401: {
							description: "Unauthorized",
							schema: {
								$ref: "#/definitions/GeneralError"
							}
						},
						422: {
							description: "Unprocessable Entity",
							schema: {
								$ref: "#/definitions/GeneralError"
							}
						}
					}
				}
			},
			"/users": {
				post: {
					/**
					 *
					 * Registration
					 *
					 */
					summary: "User Registration",
					description: "Register a new user",
					operationId: "CreateUser",
					tags: [
						"User"
					],
					produces: [
						"application/json"
					],
					parameters: [
						{
							name: "body",
							in: "body",
							required: true,
							description: "Details of the new user to register",
							schema: {
								$ref: "#/definitions/UserRegisterRequest"
							}
						}
					],
					responses: {
						200: {
							description: "Success",
							schema: schema.user.properties.doc,
							examples: {
								"application/json": userResponseExample
							}
						},
						422: {
							description: "Unprocessable Entity",
							schema: {
								$ref: "#/definitions/GeneralError"
							},
							examples: {
								"application/json": {
									errors: {
										body: [
											"\"name\" length must be at least 3 characters long",
											"\"email\" must be a valid email",
											"\"password\" length must be at least 3 characters long"
										]
									}
								}
							}
						},
						500: {
							description: "Internal Server Error",
							schema: {
								$ref: "#/definitions/GeneralError"
							}
						}
					}
				}
			},
			"/user": {
				/**
				 *
				 * Get Current User
				 *
				 */
				get: {
					summary: "Get Current User",
					description: "Get the user document from requests' access token",
					operationId: "getCurrentUser",
					tags: [
						"User"
					],
					security: [
						{
							Token: []
						}
					],
					produces: [
						"application/json"
					],
					responses: {
						200: {
							description: "Success",
							schema: schema.user.properties.doc,
							examples: {
								"application/json": userResponseExample
							}
						},
						403: {
							description: "Forbidden",
							schema: {
								$ref: "#/definitions/GeneralError"
							}
						},
						default: {
							description: "Internal Server Error",
							schema: {
								$ref: "#/definitions/GeneralError"
							}
						}
					}
				}
			},
			"/profile/:name": {
				get: {
					summary: "Get a profile",
					description: "Get a profile of a user of the system. Auth is optional",
					tags: [
						"Profile"
					],
					operationId: "GetProfileByName",
					parameters: [
						{
							name: "name",
							in: "path",
							required: true,
							description: "Name of the profile to get",
							schema: {
								$ref: "#/definitions/name"
							}
						}
					],
					responses: {
						200: {
							description: "Success",
							// Get profile API will not return the user token
							// schema: schema.profile.properties.doc,
							examples: {
								"application/json": {
									profile: {
										name: "testing",
										bio: null,
										image: null,
										following: false
									}
								}
							}
						},
						403: {
							description: "Forbidden",
							schema: {
								$ref: "#/definitions/GeneralError"
							}
						},
						default: {
							description: "Internal Server Error",
							schema: {
								$ref: "#/definitions/GeneralError"
							}
						}
					}
				}
			},
			"/profile/{name}/follow": {
				post: {
					summary: "Follow a user",
					description: "Follow a user by name",
					tags: [
						"Profile"
					],
					security: [
						{
							Token: []
						}
					],
					operationId: "FollowUserByName",
					parameters: [
						{
							name: "name",
							in: "path",
							required: true,
							description: "Name of the profile to get",
							schema: {
								$ref: "#/definitions/Name"
							}
						}
					],
					responses: {
						200: {
							description: "Success",
							schema: {
								type: "object",
								properties: {
									name: {
										type: "string",
										minLength: 4,
										maxLength: 52,
										description: "The name (handle) of the user"
									},
									email: {
										type: "string",
										format: "email",
										description: "The email address of the user"
									},
									bio: {
										type: "string",
										description: "A short description about the user"
									},
									image: {
										type: "string",
										description: "Image URL which is used to display on the website"
									},
									following: {
										type: "boolean",
										description: "Variable that indicates the authenticated user is following the target user or not"
									}
								}
							}
						},
						403: {
							description: "Forbidden",
							schema: {
								$ref: "#/definitions/GeneralError"
							}
						},
						default: {
							description: "Internal Server Error",
							schema: {
								$ref: "#/definitions/GeneralError"
							}
						}
					}
				}
			}
		},
		definitions: {
			UserLoginRequest: schema.user.properties.login.properties.body,
			UserRegisterRequest: schema.user.properties.register.properties.body,
			Name: schema.user.properties.doc.name,
			GeneralError: {
				properties: {
					error: {
						type: "object",
						properties: {
							message: {
								type: "string",
								description: "A summary of the error that occurs"
							}
						}
					}
				}
			}
		}
	};

	json.stringified = JSON.stringify(json);
	return json;
}

module.exports = { get };
